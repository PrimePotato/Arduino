
int ch_lims[RC_NUM_CHANNELS][4] = {{1000, 2000, 0, 180}, {1000, 2000, 0, 180}, {1000, 2000, 0, 180}}; 
int pos = 0;    
uint16_t rc_values[RC_NUM_CHANNELS];
uint32_t rc_start[RC_NUM_CHANNELS];
uint16_t gyro_values[GYRO_NUM_CHANNELS];
uint16_t gyro_values_old[GYRO_NUM_CHANNELS];
uint16_t rx_servo_vals_old[RC_NUM_CHANNELS];
uint16_t rx_servo_vals[RC_NUM_CHANNELS];

Servo servo_steering;
Servo servo_throttle;

volatile uint16_t rc_shared[RC_NUM_CHANNELS];
const int MPU_addr = 0x68; // I2C address of the MPU-6050
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;

void rc_read_values() {
  noInterrupts();
  memcpy(rc_values, (const void *)rc_shared, sizeof(rc_shared));
  interrupts();
}

void calc_input(uint8_t channel, uint8_t input_pin) {
  if (digitalRead(input_pin) == HIGH) {
    rc_start[channel] = micros();
  } else {
    uint16_t rc_compare = (uint16_t)(micros() - rc_start[channel]);
    rc_shared[channel] = rc_compare;
  }
}

void retrieve_gyro_data() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);
  for (int i = 0; i < GYRO_NUM_CHANNELS; i++) {
    gyro_values[i] = Wire.read() << 8 | Wire.read();
  }
  //  AcX = Wire.read() << 8 | Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
  //  AcY = Wire.read() << 8 | Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  //  AcZ = Wire.read() << 8 | Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  //  Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  //  GyX = Wire.read() << 8 | Wire.read(); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  //  GyY = Wire.read() << 8 | Wire.read(); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  //  GyZ = Wire.read() << 8 | Wire.read();
}

void calc_ch1() {
  calc_input(RC_CH1, RC_CH1_INPUT);
}
void calc_ch2() {
  calc_input(RC_CH2, RC_CH2_INPUT);
}
void calc_ch3() {
  calc_input(RC_CH3, RC_CH3_INPUT);
}

double ewma(double new_val, double old_val, double lambda) {
  return new_val * lambda + (1 - lambda) * old_val;
}


void map_rc_values_to_servo() {
  for (int i = 0; i < RC_NUM_CHANNELS; i++) {
    if (rc_values[i] < ch_lims[i][0]) {
      rx_servo_vals[i] = ch_lims[i][2];
    }
    else if (rc_values[i] > ch_lims[i][1]) {
      rx_servo_vals[i] = ch_lims[i][3];
    }
    else {
      rx_servo_vals[i] = map(rc_values[i], ch_lims[i][0], ch_lims[i][1], ch_lims[i][2], ch_lims[i][3]);
    }
  }
}

void output_rx_values() {
  for (int i = 0; i < RC_NUM_CHANNELS; i++) {
    Serial.print("CH"); Serial.print(i); Serial.print(": "); Serial.print(rc_values[i]); Serial.print("\t");
    Serial.print("SERVO"); Serial.print(i); Serial.print(": "); Serial.print(rx_servo_vals[i]); Serial.print("\t");
  }
  Serial.println("");
}

void output_gyro_values(){
  for (int i = 0; i < GYRO_NUM_CHANNELS; i++) {
    Serial.print("Gyro Value "); Serial.print(i); Serial.print(": "); Serial.print(gyro_values[i]);
  }
  Serial.println("");
}

